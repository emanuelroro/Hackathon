"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class PostInstallCliCommand {
    constructor($fs, $subscriptionService, $commandsService, $helpService, $settingsService, $analyticsService, $logger, $hostInfo) {
        this.$fs = $fs;
        this.$subscriptionService = $subscriptionService;
        this.$commandsService = $commandsService;
        this.$helpService = $helpService;
        this.$settingsService = $settingsService;
        this.$analyticsService = $analyticsService;
        this.$logger = $logger;
        this.$hostInfo = $hostInfo;
        this.disableAnalytics = true;
        this.allowedParameters = [];
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.$hostInfo.isWindows) {
                if (process.env.SUDO_USER) {
                    yield this.$fs.setCurrentUserAsOwner(this.$settingsService.getProfileDir(), process.env.SUDO_USER);
                }
            }
            yield this.$helpService.generateHtmlPages();
            yield this.$analyticsService.checkConsent();
            yield this.$commandsService.tryExecuteCommand("autocomplete", []);
            this.$logger.out();
            this.$logger.printMarkdown("Installation successful. You are good to go. Connect with us on `http://twitter.com/NativeScript`.");
            yield this.$subscriptionService.subscribeForNewsletter();
        });
    }
    postCommandAction(args) {
        return __awaiter(this, void 0, void 0, function* () {
            this.$logger.info("You have successfully installed the NativeScript CLI!");
            this.$logger.info("To create a new project, you use:".green);
            this.$logger.printMarkdown("`tns create <app name>`");
            this.$logger.info("To build your project locally you use:".green);
            this.$logger.printMarkdown("`tns build <platform>`");
            this.$logger.printMarkdown("NOTE: Local builds require additional setup of your environment. You can find more information here: `https://docs.nativescript.org/start/quick-setup`");
            this.$logger.info("");
            this.$logger.info("To build your project in the cloud you can use:".green);
            this.$logger.printMarkdown("`tns cloud build <platform>`");
            this.$logger.printMarkdown("NOTE: Cloud builds require Telerik account. You can find more information here: `https://docs.nativescript.org/sidekick/intro/requirements`");
            this.$logger.info("");
            this.$logger.printMarkdown("If you want to experiment with NativeScript in your browser, try the Playground: `https://play.nativescript.org`");
            this.$logger.info("");
            this.$logger.printMarkdown("If you have any questions, check Stack Overflow: `https://stackoverflow.com/questions/tagged/nativescript` and our public Slack channel: `https://nativescriptcommunity.slack.com/`");
        });
    }
}
exports.PostInstallCliCommand = PostInstallCliCommand;
$injector.registerCommand("post-install-cli", PostInstallCliCommand);
