"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const helpers_1 = require("../helpers");
class PreUninstallCommand {
    constructor($extensibilityService, $fs, $packageInstallationManager, $settingsService) {
        this.$extensibilityService = $extensibilityService;
        this.$fs = $fs;
        this.$packageInstallationManager = $packageInstallationManager;
        this.$settingsService = $settingsService;
        this.disableAnalytics = true;
        this.allowedParameters = [];
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            const isIntentionalUninstall = helpers_1.doesCurrentNpmCommandMatch([/^uninstall$/, /^remove$/, /^rm$/, /^r$/, /^un$/, /^unlink$/]);
            if (isIntentionalUninstall) {
                this.handleIntentionalUninstall();
            }
            this.$fs.deleteFile(path.join(this.$settingsService.getProfileDir(), "KillSwitches", "cli"));
        });
    }
    handleIntentionalUninstall() {
        this.$extensibilityService.removeAllExtensions();
        this.$packageInstallationManager.clearInspectorCache();
    }
}
exports.PreUninstallCommand = PreUninstallCommand;
$injector.registerCommand("dev-preuninstall", PreUninstallCommand);
